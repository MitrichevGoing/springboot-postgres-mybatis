buildscript {
    ext {
        springBootVersion = '2.1.5.RELEASE'

    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4"
    }
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.arenagod.gradle.MybatisGenerator'

group = 'com.potter.postgres'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    mybatisGenerator
}

repositories {
    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.0.1'
    compileOnly 'org.projectlombok:lombok:1.18.8'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    compile 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.58'
    compile group: 'net.postgis', name: 'postgis-jdbc', version: '2.3.0'
    compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: '1.2.10'
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.7'
    mybatisGenerator 'org.postgresql:postgresql'
}

//skip Test tasks
gradle.taskGraph.whenReady {
    tasks.each { task ->
        if (task.name.contains("test"))
        {
            task.enabled = false
        }
    }
}

//File configFile = file('src/main/resources/generatorConfig.xml')
//println configFile.toURL().toString()



mybatisGenerator {
    overwrite = true
    verbose = true
    configFile = 'src/main/resources/generatorConfig.xml'
}


